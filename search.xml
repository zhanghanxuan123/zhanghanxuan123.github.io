<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android开发进阶-Activity笔记]]></title>
      <url>http://zhanghanxuan123.github.io/2017/05/06/Activity-note/</url>
      <content type="html"><![CDATA[<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>生命周期图：<br><img src="http://on2ekkj4q.bkt.clouddn.com/ActivityLife.png" alt="生命周期"></p>
<p>视图结构<br><img src="http://on2ekkj4q.bkt.clouddn.com/Activity%E7%BB%93%E6%9E%84.png" alt="视图结构"><br>这里的DecorView实际上才是页面的顶级视图，PhoneWindow是Window的实现类</p>
<p>Activity的四种启动模式<br>Anroid内部使用通过会退栈来管理Activity实例</p>
<ul>
<li>standard</li>
<li>singleTop</li>
<li>singleTask</li>
<li>singleInstance</li>
</ul>
<h3 id="Service与AIDL"><a href="#Service与AIDL" class="headerlink" title="Service与AIDL"></a>Service与AIDL</h3><p>service默认并不会运行在子线程中，它执行在UI线程中，因此，不要在Service中执行耗时操作，除非你在Service中创建子线程。相应的服务启动起来，首次创建会调用onCreat函数，然后回调onStartCommand()函数。虽然每调用一次startService()函数，onStartCommand()就会执行一次，但每个服务只会存在一个实例，最后只需调用一个stopService()或stopSelf()函数,服务就会被停止。</p>
<h4 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h4><p>将用户的请求执行在一个子线程中，只需复写onHandleIntent函数就能完成耗时操作。在任务执行完毕之后会调用stopself自我销毁，因此，适合于一些短期的耗时任务。</p>
<h4 id="运行在前台的Service"><a href="#运行在前台的Service" class="headerlink" title="运行在前台的Service"></a>运行在前台的Service</h4><p>通知栏上</p>
<h4 id="AIDL-Android接口描述语言"><a href="#AIDL-Android接口描述语言" class="headerlink" title="AIDL(Android接口描述语言)"></a>AIDL(Android接口描述语言)</h4><p>常用语进程间通信。编译器根据AIDL文件生成一个系列对应的Java类，通过预先定义的接口以及Binder机制达到进程间的通信目的。</p>
<h3 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h3><p>Android广播机制包含三个要素，发送广播的Broadcast,接收广播的BroadReceiver以及用于传递信息的Intent。</p>
<ul>
<li>普通广播</li>
</ul>
<p>消息的传递效率高，但所有的receivers的执行顺序不确定；接受之不能处理结果传递给下一个接收者，并且无法终止广播的Intent的传播，知道没有与之匹配的广播接收器为止。</p>
<ul>
<li>有序广播</li>
</ul>
<p>可以通过设置优先级依次执行，可以使用setResult()函数来传递结果给下一个广播，并且可以用abortBroadcast()函数来让系统丢弃该广播</p>
<ul>
<li>本地广播</li>
</ul>
<p>建议在不需要其他线程接收广播的情况下使用本地广播</p>
<ul>
<li>Sticky广播</li>
</ul>
<p>Sticky广播通过Context.sendStickyBroadcast()函数来发送，用次函数发送的广播会一直滞留，当有匹配此广播的接收器备注册后，就会接受此条广播，需要获得相应权限</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android开发进阶-多线程笔记]]></title>
      <url>http://zhanghanxuan123.github.io/2017/05/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="Android中的消息机制"><a href="#Android中的消息机制" class="headerlink" title="Android中的消息机制"></a>Android中的消息机制</h2><h3 id="处理消息的手段"><a href="#处理消息的手段" class="headerlink" title="处理消息的手段"></a>处理消息的手段</h3><p>Handler,Looper,MessageQue<br><img src="http://on2ekkj4q.bkt.clouddn.com/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6.jpg" alt="消息机制"><br>Android应用启动时，会默认有一个主线程(UI线程)，在这个线程中会关联一个消息队列，所有的操作都会被封装成消息然后交给主线程来处理。为了保证主线程不会主动退出，会将获取消息的操作放在一个死循环中，如上图。</p>
<p>UI线程的消息循环是在ActivityThread.main方法中创建的，该函数为应用程序的主入口。<br><img src="http://on2ekkj4q.bkt.clouddn.com/ActivityThread.jpg" alt="ActivityThread"><br>子线程中执行完耗时操作后，很多情况下需要更新UI，但我们都知道，不能在子线程中更新UI。此时最常用的手段就是通过Handlr将一个消息post到UI线程中，然后再在Handler的handleMessage方法中进行处理，但需要注意的是，Handler必须在主线程中创建。</p>
<p>每个Handler都会关联一个消息队列，消息队列被封装在Looper中，而每个Looper又会关联一个线程，最终就等于每个消息队列会关联一个线程。默认情况下，消息队列只有一个，即主线程的消息队列，就是上图中的通过Looper.prepareMainLoop()来创建的，最后执行Looper.loop()来启动消息循环。</p>
<p>那么Handler是如何关联消息队列以及线程的呢？？？</p>
<p>在子线程中创建Handler为何会抛出异常？？？</p>
<h3 id="Andriod中的多线程"><a href="#Andriod中的多线程" class="headerlink" title="Andriod中的多线程"></a>Andriod中的多线程</h3><p>Android中的多线程实际上就是Java SE中的多线程，为了方便实用，Android封装可一些类，如Aynctask、HandlerThread</p>
<h4 id="多线程的实现——Thread和Runable"><a href="#多线程的实现——Thread和Runable" class="headerlink" title="多线程的实现——Thread和Runable"></a>多线程的实现——Thread和Runable</h4><p>实际上，Thread也是一个Runnable,它实现了Runnable接口。Threa里有一个target的Runnable字段，最终执行任务的是Runnable。Runnable接口定义了可执行的任务，它只有一个无返回值的run()函数。</p>
<h4 id="线程的wait-sleep-join-yield"><a href="#线程的wait-sleep-join-yield" class="headerlink" title="线程的wait,sleep,join,yield"></a>线程的wait,sleep,join,yield</h4><ul>
<li>sleep()方法</li>
</ul>
<p>在指定时间内让当前正在执行的线程暂停执行，但不会释放“锁标志”。不推荐使用。</p>
<p>sleep()使当前线程进入阻塞状态，在指定时间内不会执行。</p>
<ul>
<li>wait()方法</li>
</ul>
<p>在其他线程调用对象的notify或notifyAll方法前，导致当前线程等待。线程会释放掉它所占有的“锁标志”，从而使别的线程有机会抢占该锁。</p>
<p>当前线程必须拥有当前对象锁。如果当前线程不是此锁的拥有者，会抛出IllegalMonitorStateException异常。</p>
<p>唤醒当前对象锁的等待线程使用notify或notifyAll方法，也必须拥有相同的对象锁，否则也会抛出IllegalMonitorStateException异常。</p>
<p>waite()和notify()必须在synchronized函数或synchronized　block中进行调用。如果在non-synchronized函数或non-synchronized　block中进行调用，虽然能编译通过，但在运行时会发生IllegalMonitorStateException的异常。</p>
<ul>
<li>yield方法</li>
</ul>
<p>暂停当前正在执行的线程对象。</p>
<p>yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。</p>
<p>yield()只能使同优先级或更高优先级的线程有执行的机会。 </p>
<ul>
<li>join方法</li>
</ul>
<p>等待该线程终止。</p>
<p>等待调用join方法的线程结束，再继续执行。如：t.join();//主要用于等待t线程运行结束，若无此句，main则会执行完毕，导致结果不可预测。</p>
<h4 id="与多线程相关的方法——Callable-Future和FutureTask"><a href="#与多线程相关的方法——Callable-Future和FutureTask" class="headerlink" title="与多线程相关的方法——Callable,Future和FutureTask"></a>与多线程相关的方法——Callable,Future和FutureTask</h4><p>这几个类型只能运用到线程池中，而Runnable技能运用在Thread中，又能运用在线程池中。</p>
<ol>
<li>Callable与Runnable的功能大致相似，Callable中有一个call()函数，但是call()函数有返回值，而Runnable的run()函数不能将结果返回给客户程序。<ol>
<li>Executor就是Runnable和Callable的调度容器，Future就是对于具体的Runnable或者Callable任务的执行结果进行<br>取消、查询是否完成、获取结果、设置结果操作。get方法会阻塞，直到任务返回结果(Future简介)。</li>
</ol>
</li>
<li>FutureTask则是一个RunnableFuture<v>，而RunnableFuture实现了Runnbale又实现了Futrue<v>这两个接口。</v></v></li>
</ol>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>线程池原理简单地解释就是会创建多个线程并且进行管理，提交给线程的任务会被线程池指派给其中的线程进行执行，通过线程池的统一调度、管理使得多线程的使用更简、高效。</p>
<p>线程池都实现了ExecutorService接口，该接口定义了线程池需要实现的接口如submit,execute,shutdown等。它的实现有ThreadPoolExecutor和ScheduledThreadPoolExecutor。</p>
<h5 id="ThreadPoolExecutor——启动指定数量的线程"><a href="#ThreadPoolExecutor——启动指定数量的线程" class="headerlink" title="ThreadPoolExecutor——启动指定数量的线程"></a>ThreadPoolExecutor——启动指定数量的线程</h5><p>ThreadPoolExecutor的构造函数<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize,</div><div class="line"></div><div class="line"><span class="keyword">long</span> keepAliveTime, TimeUnit unit,</div><div class="line"></div><div class="line">BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line"></div><div class="line">RejectedExecutionHandler <span class="keyword">handler</span>)</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>参数名</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>corePoolSize</td>
<td style="text-align:center">线程池维护线程的最少数量</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td style="text-align:center">线程池维护线程的最大数量</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td style="text-align:center">线程池维护线程所允许的空闲时间</td>
</tr>
<tr>
<td>unit</td>
<td style="text-align:center">线程池维护线程所允许的空闲时间的单位</td>
</tr>
<tr>
<td>workQueue</td>
<td style="text-align:center">线程池所使用的缓冲队列</td>
</tr>
<tr>
<td>handler</td>
<td style="text-align:center">线程池对拒绝任务的处理策略</td>
</tr>
</tbody>
</table>
<p>workQueue的常用实现</p>
<ul>
<li>ArrayBlockingQueue</li>
<li>LinkedBlockingQueue</li>
<li>SynchronousQueue</li>
<li>PriorityBlockingQueue</li>
</ul>
<h5 id="ScheduledThreadPoolExecutor——定时执行一些任务"><a href="#ScheduledThreadPoolExecutor——定时执行一些任务" class="headerlink" title="ScheduledThreadPoolExecutor——定时执行一些任务"></a>ScheduledThreadPoolExecutor——定时执行一些任务</h5>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit+RxJava优雅地实现文件下载并监听进度的功能]]></title>
      <url>http://zhanghanxuan123.github.io/2017/03/29/download-file/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<a href="https://zhanghanxuan123.github.io/2017/03/23/upload-file/">上一篇文章</a>中使用了Rxjava和Retrofit实现了图文上传,那么这篇文章将介绍如何使用其下载文件。</p>
<p>其实下载文件功能在APP中使用十分频繁，最典型的场景就是APP内的版本升级，请求下载最新版本APK并安装。本篇文章实现的功能就是用Rxjava和Retrofit实现文件下载并监听其下载进度。废话不多说，先看效果图：</p>
<p><img src="http://on2ekkj4q.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170328201427.gif" alt="Markdown"></p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="下载进度事件对象"><a href="#下载进度事件对象" class="headerlink" title="下载进度事件对象"></a>下载进度事件对象</h2><p>之所以要监听下载进度，我觉得这是一种对用户的反馈，提升用户的体验。首先要定义下载进度事件对象的类<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DownloadProgressEvent</span> &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 文件总大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mTotal;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前下载进度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mProgress;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DownloadProgressEvent</span>(<span class="params"><span class="keyword">long</span> total, <span class="keyword">long</span> progress</span>) </span>&#123;</div><div class="line">        mTotal = total;</div><div class="line">        mProgress = progress;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取文件总大小</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotal</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> mTotal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getProgress</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> mProgress;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否还没有下载完成</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">isNotDownloadFinished</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> mTotal != mProgress;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="重写拦截器"><a href="#重写拦截器" class="headerlink" title="重写拦截器"></a>重写拦截器</h2><p>得到进度的变化就必须重写ResponseBody，处理进度。为什么要重写ResponseBody呢，这里<a href="https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Progress.java" target="_blank" rel="external">Okhttp官方Demo</a>给出了解释，就是使用拦截器。下面是重写拦截器。<br><img src="http://on2ekkj4q.bkt.clouddn.com/download_useIntercept.png" alt="重写拦截器"></p>
<h2 id="重写ResponseBody"><a href="#重写ResponseBody" class="headerlink" title="重写ResponseBody"></a>重写ResponseBody</h2><p>下面我们对ResponseBody进行重写<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadResponseBody</span> <span class="keyword">extends</span> <span class="title">ResponseBody</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResponseBody mResponseBody;</div><div class="line">    <span class="keyword">private</span> BufferedSource mBufferedSource;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DownloadResponseBody</span><span class="params">(ResponseBody responseBody)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.mResponseBody = responseBody;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mResponseBody.<span class="title">contentType</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mResponseBody.<span class="title">contentLength</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">BufferedSource <span class="title">source</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mBufferedSource == <span class="keyword">null</span>) &#123;</div><div class="line">            mBufferedSource = Okio.buffer(source(mResponseBody.source()));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mBufferedSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function">Source <span class="title">source</span><span class="params">(Source source)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForwardingSource(source) &#123;</div><div class="line">            <span class="keyword">private</span> <span class="keyword">long</span> mProgress = <span class="number">0</span>;</div><div class="line">            <span class="keyword">private</span> <span class="keyword">long</span> mLastSendTime = <span class="number">0</span>;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">read</span><span class="params">(Buffer sink, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">long</span> bytesRead = <span class="keyword">super</span>.read(sink, byteCount);</div><div class="line">                mProgress += bytesRead == <span class="number">-1</span> ? <span class="number">0</span> : bytesRead;</div><div class="line">                <span class="keyword">if</span> (System.currentTimeMillis() - mLastSendTime &gt; <span class="number">500</span>) &#123;</div><div class="line">                    RxUtil.send(<span class="keyword">new</span> DownloadProgressEvent(contentLength(), mProgress));</div><div class="line">                    mLastSendTime = System.currentTimeMillis();</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mProgress == contentLength()) &#123;</div><div class="line">                    Observable.just(mProgress).delaySubscription(<span class="number">500</span>, TimeUnit.MILLISECONDS, Schedulers.io()).subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                            RxUtil.send(<span class="keyword">new</span> DownloadProgressEvent(contentLength(), mProgress));</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> bytesRead;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们对原始的ResponseBody 进行了一层包装。并在其读取数据的时候设置了回调，回调的接口由构造函数传入，此外构造函数还传入了原始的ResponseBody，当系统内部调用了ResponseBody 的source方法的时候，返回的便是我们包装后的Source。然后我们还重写了几个方法调用原始的ResponseBody对应的函数返回结果。</p>
<h2 id="发送进度"><a href="#发送进度" class="headerlink" title="发送进度"></a>发送进度</h2><p>注意，上面的read方法里我们用了RxUtil发送进度，下面是RxUtil的内容：<br><img src="http://on2ekkj4q.bkt.clouddn.com/download_file_RxUtil.jpg" alt="RxUtil"><br>在RxUtil中，用了RxBus,如果你对RxBus不熟悉,<a href="http://www.jianshu.com/p/ca090f6e2fe2" target="_blank" rel="external">请戳这里</a>。</p>
<h2 id="实现网络请求类DownloadHttp"><a href="#实现网络请求类DownloadHttp" class="headerlink" title="实现网络请求类DownloadHttp"></a>实现网络请求类DownloadHttp</h2><p>重写拦截器是DownloadHttp中的方法，以下是剩余的方法。</p>
<p>DownloadHttp的构造方法<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//这里baseUrl传入的地址对后面没有影响，所以随便填了</div><div class="line">public DownloadHttp() &#123;</div><div class="line">        <span class="attribute">mDownloadApi = new Retrofit.Builder()</span></div><div class="line">                .baseUrl("https://github<span class="variable">.com</span>/zhanghanxuan123")</div><div class="line">                <span class="variable">.client</span>(getDownloadOkHttpClient())</div><div class="line">                <span class="variable">.addCallAdapterFactory</span>(RxJavaCallAdapterFactory<span class="variable">.create</span>())</div><div class="line">                <span class="variable">.build</span>()</div><div class="line">                <span class="variable">.create</span>(DownloadApi<span class="variable">.class</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>定义请求的接口，使用@Url注解，得到动态传进来的动态url<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">DownloadApi</span> &#123;</div><div class="line">        <span class="variable">@Streaming</span></div><div class="line">        <span class="variable">@GET</span></div><div class="line">        Observable&lt;ResponseBody&gt; downloadFile(<span class="variable">@Url</span> String url);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="实现更新窗口类AppCompatDialog"><a href="#实现更新窗口类AppCompatDialog" class="headerlink" title="实现更新窗口类AppCompatDialog"></a>实现更新窗口类AppCompatDialog</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadingDialog</span> <span class="keyword">extends</span> <span class="title">AppCompatDialog</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ProgressBar mProgressBar;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DownloadingDialog</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, R.style.AppDialogTheme);</div><div class="line">        setContentView(R.layout.dialog_downloading);</div><div class="line">        mProgressBar = (ProgressBar) findViewById(R.id.progressbar);</div><div class="line">        setCancelable(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(<span class="keyword">long</span> progress, <span class="keyword">long</span> maxProgress)</span> </span>&#123;</div><div class="line">        mProgressBar.setMax((<span class="keyword">int</span>) maxProgress);</div><div class="line">        mProgressBar.setProgress((<span class="keyword">int</span>) progress);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.show();</div><div class="line">        mProgressBar.setMax(<span class="number">100</span>);</div><div class="line">        mProgressBar.setProgress(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里实现了横向的进度条，查看进度</p>
<h2 id="MainActivity内容"><a href="#MainActivity内容" class="headerlink" title="MainActivity内容"></a>MainActivity内容</h2><p>在onCreate()方法中得到下载进度<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">RxUtil.getDownloadEventObservable()</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;DownloadProgressEvent&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(DownloadProgressEvent downloadProgressEvent)</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (mDownloadingDialog != <span class="keyword">null</span> &amp;&amp; mDownloadingDialog.isShowing() &amp;&amp; downloadProgressEvent.isNotDownloadFinished()) &#123;</div><div class="line">                            mDownloadingDialog.setProgress(downloadProgressEvent.getProgress(), downloadProgressEvent.getTotal());</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<p>下面是通过网络拿文件的方法<br><img src="http://on2ekkj4q.bkt.clouddn.com/download_file_downloadApk.jpg" alt="downloadApkFile"><br>这里使用了Rxjava的map操作法进行了转换。我们先拿到ResponseBody，再得到字节流，通过saveApk这个方法拿到我们的APK文件。<br>这里我们在subscibe方法中new的是Subscriber这个对象，Subscriber和Observer不同是Subscriber增加了onStart方法，方便我们显示进度框。不过我在其他关于RxJAva的文章中看到onStart不适合显示进度的对话框，但我这样写也暂时没出现问题…</p>
<p>最后就是拿到APK文件进行新版本的更新<br><img src="http://on2ekkj4q.bkt.clouddn.com/download_file_installApk.jpg" alt="installApk"></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是使用RxJava、Retrofit和RxBus完成的文件下载及监听的功能，总体来说，实现的原理并不难理解，但这里面还是有很多知识需要仔细去了解和运用。其实使用这些框架还能做很多事情，以后有机会再去慢慢探索吧。<br><a href="https://github.com/zhanghanxuan123/DownloadTest" target="_blank" rel="external">项目地址</a></p>
]]></content>
      
        <categories>
            
            <category> Android开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit+RxJava优雅地实现图文上传功能]]></title>
      <url>http://zhanghanxuan123.github.io/2017/03/23/upload-file/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近工作室的项目需要用到图片上传的功能，以前自己写过这样的功能不过代码很乱，故自己用Retrofit+Rxjava重新实现了下。What？你还不知道Retrofit和RxJava? </p>
<p>请戳这里</p>
<ul>
<li><a href="http://duanyytop.github.io/2016/08/06/Retrofit%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Retrofit用法详解</a></li>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083#toc_1" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></li>
<li><a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="external">RxJava 与 Retrofit 结合的最佳实践</a></li>
</ul>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Android端实现图片上传的两种方式"><a href="#Android端实现图片上传的两种方式" class="headerlink" title="Android端实现图片上传的两种方式"></a>Android端实现图片上传的两种方式</h2><ul>
<li><p>Base64编码</p>
<p>手机端先将图片压缩，然后转换为base64字节流的形式封装到Json字符串，再将封装好的Json上传到服务器。此种方法手机端使用十分方便简单，不过对于服务器端来说处理就有些麻烦，也没有体现出标题所强调的“优雅”，因此本文不对该方法进行重点介绍。</p>
</li>
<li><p>文件上传</p>
<p>通过文件上传的方法将图片传到服务器。</p>
</li>
</ul>
<h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>要了解如何通过网络上传文件，首先我们得了解 <a href="http://blog.csdn.net/five3/article/details/7181521" target="_blank" rel="external">HTTP协议之multipart/form-data</a>。</p>
<h2 id="Retrofit中对multipart-form-data的封装"><a href="#Retrofit中对multipart-form-data的封装" class="headerlink" title="Retrofit中对multipart/form-data的封装"></a>Retrofit中对multipart/form-data的封装</h2><p>由于Retrofit是一个网络库的封装，具体的网络请求默认是使用OkHttp，Retrofit对于multipart的支持最终也会转换成OkHttp的实现。</p>
<p>在Retrofit中实现一个multipart上传：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Multipart</span></div><div class="line"><span class="variable">@POST</span>(<span class="string">"upload"</span>)</div><div class="line">Call&lt;ResponseBody&gt; uploadFile(</div><div class="line">    <span class="variable">@Part</span>(<span class="string">"description"</span>) RequestBody description,</div><div class="line">    <span class="variable">@Part</span> MultipartBody.Part file);</div></pre></td></tr></table></figure></p>
<p>其中：</p>
<p>@retrofit2.http.Multipart 注解: 标记一个请求是multipart/form-data类型,需要和@retrofit2.http.POST一同使用，参数可以是 MultipartBody.Part 或 RequestBody 。<br>@retrofit2.http.Part 注解: 代表Multipart里的一项数据,即用${bound}分隔的内容块。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>上面BB了那么多，你大概也对此有一些了解了，不上具体代码怎么行？</p>
<h3 id="接收图片的接口"><a href="#接收图片的接口" class="headerlink" title="接收图片的接口"></a>接收图片的接口</h3><p>本来想自己写个Servlet接收客户端的图片，但嫌麻烦(不会)直接用了<a href="https://www.juhe.cn/docs/api/id/153/aid/493" target="_blank" rel="external">聚合数据</a>的接口进行调试。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"error_code"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"reason"</span>: <span class="string">"操作成功"</span>,</div><div class="line">    <span class="string">"result"</span>: &#123;</div><div class="line">        <span class="string">"住址"</span>: <span class="string">"武汉市江岸区永清路****"</span>,</div><div class="line">        <span class="string">"保留"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"公民身份号码"</span>: <span class="string">"42010619510609****"</span>,</div><div class="line">        <span class="string">"出生"</span>: <span class="string">"1951-06-09"</span>,</div><div class="line">        <span class="string">"头像"</span>: <span class="string">""</span>,/*Base64字符串*/</div><div class="line">        <span class="string">"姓名"</span>: <span class="string">"彭*"</span>,</div><div class="line">        <span class="string">"性别"</span>: <span class="string">"男"</span>,</div><div class="line">        <span class="string">"民族"</span>: <span class="string">"汉"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是接口返回的数据，我们由此新建一个Person.java类</p>
<h3 id="网络请求类"><a href="#网络请求类" class="headerlink" title="网络请求类"></a>网络请求类</h3><p>下面是三个实现网络请求类<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OneService.java</span></div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">OneService</span> &#123;</div><div class="line">     <span class="variable">@Multipart</span></div><div class="line">     <span class="variable">@POST</span>(<span class="string">"certificates/query.php"</span>)</div><div class="line">     Observable&lt;Person&gt;uploadFile(<span class="variable">@PartMap</span> Map&lt;String,RequestBody&gt; params);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OneRetrofit.java</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OneRetrofit</span> &#123;</span></div><div class="line">    final <span class="type">OneService</span> mService;</div><div class="line">    private <span class="type">String</span> <span class="type">OneBase1</span> = <span class="string">"http://v.juhe.cn/"</span>;</div><div class="line">    <span class="type">OneRetrofit</span>() &#123;</div><div class="line">        <span class="type">Gson</span> gson = <span class="function"><span class="keyword">new</span> <span class="title">GsonBuilder</span>()</span></div><div class="line">                .<span class="title">setDateFormat</span>("yyyy-<span class="type">MM</span>-dd")</div><div class="line">                .<span class="title">create</span>();</div><div class="line">        <span class="title">Retrofit</span> <span class="title">retrofit</span> = <span class="title">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</div><div class="line">                .<span class="title">baseUrl</span>(<span class="type">OneBase1</span>)</div><div class="line">                .<span class="title">addConverterFactory</span>(<span class="type">GsonConverterFactory</span>.create(gson))</div><div class="line">                .<span class="title">addCallAdapterFactory</span>(<span class="type">RxJavaCallAdapterFactory</span>.create())</div><div class="line">                .<span class="title">build</span>();</div><div class="line">        <span class="title">mService</span> = <span class="title">retrofit</span>.<span class="title">create</span>(<span class="type">OneService</span>.class);</div><div class="line">    &#125;</div><div class="line">    <span class="title">public</span> <span class="title">OneService</span> <span class="title">getService</span>()&#123;</div><div class="line">        <span class="title">return</span> <span class="title">mService</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// OneHttp.java<span class="keyword"></span></div><div class="line">public class OneHttp &#123;</div><div class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> OneService mService;</div><div class="line">   <span class="keyword"> protected</span><span class="keyword"> static</span><span class="keyword"> final</span> Object<span class="built_in"> monitor </span>=<span class="built_in"> new </span>Object();</div><div class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> OneService getServiceInstance()&#123;</div><div class="line">        synchronized (monitor)&#123;</div><div class="line">            if(mService==null)&#123;</div><div class="line">                mService =<span class="built_in"> new </span>OneRetrofit().getService();</div><div class="line">            &#125;</div><div class="line">           <span class="built_in"> return </span>mService;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在 uploadFile 的这个方法用了@PartMap注解用来标识一个Map类型的参数。Map的key为String  类型，代表上传的键值对的key(与服务器接受的key对应),value即为RequestBody。</p>
<p>我们使用这个网络请求用了单例模式，当然这个简单的Demo用不需要用到，但这样写总是一个好习惯。</p>
<h3 id="Activity中发送文件的方法"><a href="#Activity中发送文件的方法" class="headerlink" title="Activity中发送文件的方法"></a>Activity中发送文件的方法</h3><p>首先我们先看发送文件时需要的参数<br><img src="http://i4.buimg.com/589057/5bbb28411a59fdfc.png" alt="Markdown"></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> uploadPic() &#123;</div><div class="line">        <span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(Environment.getExternalStorageDirectory()+<span class="built_in">File</span>.separator+<span class="string">"/Tencent/QQ_Images/-21cac07b2f723e7a.jpg"</span>);</div><div class="line">        Map&lt;<span class="keyword">String</span>,RequestBody&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        params.<span class="built_in">put</span>(<span class="string">"key"</span>,toRequestBody(<span class="string">"你申请的Key"</span>));</div><div class="line">        params.<span class="built_in">put</span>(<span class="string">"cardType"</span>,toRequestBody(<span class="string">"2"</span>));</div><div class="line">        params.<span class="built_in">put</span>(<span class="string">"pic\"; filename=\""</span>+file.getName()+<span class="string">""</span>,RequestBody.create(MediaType.parse(<span class="string">"image/jpg"</span>),file));</div><div class="line">        Observable&lt;Person&gt; observale = OneHttp.getServiceInstance().uploadFile(params);</div><div class="line">        observale.subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Person&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> onCompleted() &#123;</div><div class="line">                    &#125;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> onError(Throwable e) &#123;</div><div class="line">                        Log.d(<span class="string">"zhang"</span>,e.toString());</div><div class="line">                    &#125;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> onNext(Person person) &#123;</div><div class="line">                        Log.d(<span class="string">"zhanghanxuan"</span>,<span class="string">"1"</span>);</div><div class="line">                        Log.d(<span class="string">"zhanghanxuan"</span>, person.getReason() +<span class="string">"/"</span>+person.getError_code()+<span class="string">"/"</span>+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>姓名()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>出生()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>性别()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>民族()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>住址());</div><div class="line">                        Log.d(<span class="string">"zhanghanxuan"</span>,<span class="string">"3"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面方法中，我们也new了一个Map，并把服务器需要的参数的Key和Value传进去。这里需要注意的是，设置文件的时候，相对应的key很奇怪，例如上例pic\”; filename=\””+file.getName()+””,前面的pic就是与服务器对应的key，后面filename是服务器得到的文件名，这里参数很怪，刚开始我直接写pic一直报错。</p>
<p>上面还用到了一个toRequestBody()这个方法，这个方法主要功能是将文字参数类型转换为“text/plain”<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RequestBody <span class="title">toRequestBody</span>(<span class="params">String <span class="keyword">value</span></span>)</span>&#123;</div><div class="line">        RequestBody mRequestBody = RequestBody.create(MediaType.parse(<span class="string">"text/plain"</span>),<span class="keyword">value</span>);</div><div class="line">        <span class="keyword">return</span> mRequestBody;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>一点要在onError()这个函数中打印Log,这样方便找到错误。</li>
<li>不要忘了在MD中声明读取文件权限和网络声明权限。<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</div><div class="line">    &lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</div><div class="line">    &lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</div><div class="line">    &lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><p> <img src="http://i4.buimg.com/589057/094bb6ad4c0b9556.jpg" alt="Markdown"></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是简单的文件上传功能。你可以继续完善它，比如多文件上传等。Retrofit和RxJava实现写代码的姿势变得如此优雅简洁，虽然很多代码量看似增加不少，但代码最重要的不是简洁和可读性吗？<br>以后我会继续分享关于目前主流框架的使用心得。</p>
]]></content>
      
        <categories>
            
            <category> Android开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[My first blog]]></title>
      <url>http://zhanghanxuan123.github.io/2017/03/22/My-first-blog/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实写博客是我很长久以来就想做的事情。一是觉得能提高写作能力；二是巩固和加深自己对技术的理解吧。很多时候我都有这种感觉，有些知识自己知道怎么去用，但一旦想要解释给别人听的时候，往往说不清楚。并且,在博客上写点东西给别人看的时候，有时会获得对某些东西不一样的理解。</p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h3 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h3><p>  记录生活</p>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>  记录成为优秀程(dan)序(shen)员(gou)的成长道路</p>
<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>  我的踩坑日记</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>还是写点目标激励下自己吧</p>
<ul>
<li>暑假找个不错的实习</li>
<li>在这里经常写点东西</li>
<li>继续完善这个Blog</li>
<li>属于自己的上线APP</li>
<li>加大github contributions的绿化程度</li>
</ul>
<h1 id="Motto"><a href="#Motto" class="headerlink" title="Motto"></a>Motto</h1><p>程序人生的精彩需要坚持不懈地积累！</p>
]]></content>
      
        <categories>
            
            <category> 日志 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
