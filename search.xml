<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Retrofit+RxJava优雅地实现文件下载并监听进度的功能]]></title>
      <url>http://zhanghanxuan123.github.io/2017/03/29/download-file/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Android开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit+RxJava优雅地实现图文上传功能]]></title>
      <url>http://zhanghanxuan123.github.io/2017/03/23/upload-file/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近工作室的项目需要用到图片上传的功能，以前自己写过这样的功能不过代码很乱，故自己用Retrofit+Rxjava重新实现了下。What？你还不知道Retrofit和RxJava? </p>
<p>请戳这里</p>
<ul>
<li><a href="http://duanyytop.github.io/2016/08/06/Retrofit%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Retrofit用法详解</a></li>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083#toc_1" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></li>
<li><a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="external">RxJava 与 Retrofit 结合的最佳实践</a></li>
</ul>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Android端实现图片上传的两种方式"><a href="#Android端实现图片上传的两种方式" class="headerlink" title="Android端实现图片上传的两种方式"></a>Android端实现图片上传的两种方式</h2><ul>
<li><p>Base64编码</p>
<p>手机端先将图片压缩，然后转换为base64字节流的形式封装到Json字符串，再将封装好的Json上传到服务器。此种方法手机端使用十分方便简单，不过对于服务器端来说处理就有些麻烦，也没有体现出标题所强调的“优雅”，因此本文不对该方法进行重点介绍。</p>
</li>
<li><p>文件上传</p>
<p>通过文件上传的方法将图片传到服务器。</p>
</li>
</ul>
<h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>要了解如何通过网络上传文件，首先我们得了解 <a href="http://blog.csdn.net/five3/article/details/7181521" target="_blank" rel="external">HTTP协议之multipart/form-data</a>。</p>
<h2 id="Retrofit中对multipart-form-data的封装"><a href="#Retrofit中对multipart-form-data的封装" class="headerlink" title="Retrofit中对multipart/form-data的封装"></a>Retrofit中对multipart/form-data的封装</h2><p>由于Retrofit是一个网络库的封装，具体的网络请求默认是使用OkHttp，Retrofit对于multipart的支持最终也会转换成OkHttp的实现。</p>
<p>在Retrofit中实现一个multipart上传：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Multipart</span></div><div class="line"><span class="variable">@POST</span>(<span class="string">"upload"</span>)</div><div class="line">Call&lt;ResponseBody&gt; uploadFile(</div><div class="line">    <span class="variable">@Part</span>(<span class="string">"description"</span>) RequestBody description,</div><div class="line">    <span class="variable">@Part</span> MultipartBody.Part file);</div></pre></td></tr></table></figure></p>
<p>其中：</p>
<p>@retrofit2.http.Multipart 注解: 标记一个请求是multipart/form-data类型,需要和@retrofit2.http.POST一同使用，参数可以是 MultipartBody.Part 或 RequestBody 。<br>@retrofit2.http.Part 注解: 代表Multipart里的一项数据,即用${bound}分隔的内容块。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>上面BB了那么多，你大概也对此有一些了解了，不上具体代码怎么行？</p>
<h3 id="接收图片的接口"><a href="#接收图片的接口" class="headerlink" title="接收图片的接口"></a>接收图片的接口</h3><p>本来想自己写个Servlet接收客户端的图片，但嫌麻烦(不会)直接用了<a href="https://www.juhe.cn/docs/api/id/153/aid/493" target="_blank" rel="external">聚合数据</a>的接口进行调试。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"error_code"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"reason"</span>: <span class="string">"操作成功"</span>,</div><div class="line">    <span class="string">"result"</span>: &#123;</div><div class="line">        <span class="string">"住址"</span>: <span class="string">"武汉市江岸区永清路****"</span>,</div><div class="line">        <span class="string">"保留"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"公民身份号码"</span>: <span class="string">"42010619510609****"</span>,</div><div class="line">        <span class="string">"出生"</span>: <span class="string">"1951-06-09"</span>,</div><div class="line">        <span class="string">"头像"</span>: <span class="string">""</span>,/*Base64字符串*/</div><div class="line">        <span class="string">"姓名"</span>: <span class="string">"彭*"</span>,</div><div class="line">        <span class="string">"性别"</span>: <span class="string">"男"</span>,</div><div class="line">        <span class="string">"民族"</span>: <span class="string">"汉"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是接口返回的数据，我们由此新建一个Person.java类</p>
<h3 id="网络请求类"><a href="#网络请求类" class="headerlink" title="网络请求类"></a>网络请求类</h3><p>下面是三个实现网络请求类<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OneService.java</span></div><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">OneService</span> &#123;</div><div class="line">     <span class="variable">@Multipart</span></div><div class="line">     <span class="variable">@POST</span>(<span class="string">"certificates/query.php"</span>)</div><div class="line">     Observable&lt;Person&gt;uploadFile(<span class="variable">@PartMap</span> Map&lt;String,RequestBody&gt; params);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OneRetrofit.java</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OneRetrofit</span> &#123;</span></div><div class="line">    final <span class="type">OneService</span> mService;</div><div class="line">    private <span class="type">String</span> <span class="type">OneBase1</span> = <span class="string">"http://v.juhe.cn/"</span>;</div><div class="line">    <span class="type">OneRetrofit</span>() &#123;</div><div class="line">        <span class="type">Gson</span> gson = <span class="function"><span class="keyword">new</span> <span class="title">GsonBuilder</span>()</span></div><div class="line">                .<span class="title">setDateFormat</span>("yyyy-<span class="type">MM</span>-dd")</div><div class="line">                .<span class="title">create</span>();</div><div class="line">        <span class="title">Retrofit</span> <span class="title">retrofit</span> = <span class="title">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</div><div class="line">                .<span class="title">baseUrl</span>(<span class="type">OneBase1</span>)</div><div class="line">                .<span class="title">addConverterFactory</span>(<span class="type">GsonConverterFactory</span>.create(gson))</div><div class="line">                .<span class="title">addCallAdapterFactory</span>(<span class="type">RxJavaCallAdapterFactory</span>.create())</div><div class="line">                .<span class="title">build</span>();</div><div class="line">        <span class="title">mService</span> = <span class="title">retrofit</span>.<span class="title">create</span>(<span class="type">OneService</span>.class);</div><div class="line">    &#125;</div><div class="line">    <span class="title">public</span> <span class="title">OneService</span> <span class="title">getService</span>()&#123;</div><div class="line">        <span class="title">return</span> <span class="title">mService</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// OneHttp.java<span class="keyword"></span></div><div class="line">public class OneHttp &#123;</div><div class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> OneService mService;</div><div class="line">   <span class="keyword"> protected</span><span class="keyword"> static</span><span class="keyword"> final</span> Object<span class="built_in"> monitor </span>=<span class="built_in"> new </span>Object();</div><div class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> OneService getServiceInstance()&#123;</div><div class="line">        synchronized (monitor)&#123;</div><div class="line">            if(mService==null)&#123;</div><div class="line">                mService =<span class="built_in"> new </span>OneRetrofit().getService();</div><div class="line">            &#125;</div><div class="line">           <span class="built_in"> return </span>mService;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在 uploadFile 的这个方法用了@PartMap注解用来标识一个Map类型的参数。Map的key为String  类型，代表上传的键值对的key(与服务器接受的key对应),value即为RequestBody。</p>
<p>我们使用这个网络请求用了单例模式，当然这个简单的Demo用不需要用到，但这样写总是一个好习惯。</p>
<h3 id="Activity中发送文件的方法"><a href="#Activity中发送文件的方法" class="headerlink" title="Activity中发送文件的方法"></a>Activity中发送文件的方法</h3><p>首先我们先看发送文件时需要的参数<br><img src="http://i4.buimg.com/589057/5bbb28411a59fdfc.png" alt="Markdown"></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> uploadPic() &#123;</div><div class="line">        <span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(Environment.getExternalStorageDirectory()+<span class="built_in">File</span>.separator+<span class="string">"/Tencent/QQ_Images/-21cac07b2f723e7a.jpg"</span>);</div><div class="line">        Map&lt;<span class="keyword">String</span>,RequestBody&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        params.<span class="built_in">put</span>(<span class="string">"key"</span>,toRequestBody(<span class="string">"你申请的Key"</span>));</div><div class="line">        params.<span class="built_in">put</span>(<span class="string">"cardType"</span>,toRequestBody(<span class="string">"2"</span>));</div><div class="line">        params.<span class="built_in">put</span>(<span class="string">"pic\"; filename=\""</span>+file.getName()+<span class="string">""</span>,RequestBody.create(MediaType.parse(<span class="string">"image/jpg"</span>),file));</div><div class="line">        Observable&lt;Person&gt; observale = OneHttp.getServiceInstance().uploadFile(params);</div><div class="line">        observale.subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Person&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> onCompleted() &#123;</div><div class="line">                    &#125;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> onError(Throwable e) &#123;</div><div class="line">                        Log.d(<span class="string">"zhang"</span>,e.toString());</div><div class="line">                    &#125;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> onNext(Person person) &#123;</div><div class="line">                        Log.d(<span class="string">"zhanghanxuan"</span>,<span class="string">"1"</span>);</div><div class="line">                        Log.d(<span class="string">"zhanghanxuan"</span>, person.getReason() +<span class="string">"/"</span>+person.getError_code()+<span class="string">"/"</span>+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>姓名()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>出生()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>性别()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>民族()+person.<span class="built_in">getResult</span>().<span class="built_in">get</span>住址());</div><div class="line">                        Log.d(<span class="string">"zhanghanxuan"</span>,<span class="string">"3"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面方法中，我们也new了一个Map，并把服务器需要的参数的Key和Value传进去。这里需要注意的是，设置文件的时候，相对应的key很奇怪，例如上例pic\”; filename=\””+file.getName()+””,前面的pic就是与服务器对应的key，后面filename是服务器得到的文件名，这里参数很怪，刚开始我直接写pic一直报错。</p>
<p>上面还用到了一个toRequestBody()这个方法，这个方法主要功能是将文字参数类型转换为“text/plain”<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RequestBody <span class="title">toRequestBody</span>(<span class="params">String <span class="keyword">value</span></span>)</span>&#123;</div><div class="line">        RequestBody mRequestBody = RequestBody.create(MediaType.parse(<span class="string">"text/plain"</span>),<span class="keyword">value</span>);</div><div class="line">        <span class="keyword">return</span> mRequestBody;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>一点要在onError()这个函数中打印Log,这样方便找到错误。</li>
<li>不要忘了在MD中声明读取文件权限和网络声明权限。<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</div><div class="line">    &lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</div><div class="line">    &lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</div><div class="line">    &lt;uses-permission android:<span class="built_in">name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><p> <img src="http://i4.buimg.com/589057/094bb6ad4c0b9556.jpg" alt="Markdown"></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是简单的文件上传功能。你可以继续完善它，比如多文件上传等。Retrofit和RxJava实现写代码的姿势变得如此优雅简洁，虽然很多代码量看似增加不少，但代码最重要的不是简洁和可读性吗？<br>以后我会继续分享关于目前主流框架的使用心得。</p>
]]></content>
      
        <categories>
            
            <category> Android开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[My first blog]]></title>
      <url>http://zhanghanxuan123.github.io/2017/03/22/My-first-blog/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实写博客是我很长久以来就想做的事情。一是觉得能提高写作能力；二是巩固和加深自己对技术的理解吧。很多时候我都有这种感觉，有些知识自己知道怎么去用，但一旦想要解释给别人听的时候，往往说不清楚。并且,在博客上写点东西给别人看的时候，有时会获得对某些东西不一样的理解。</p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h3 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h3><p>  记录生活</p>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>  记录成为优秀程(dan)序(shen)员(gou)的成长道路</p>
<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>  我的踩坑日记</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>还是写点目标激励下自己吧</p>
<ul>
<li>暑假找个不错的实习</li>
<li>在这里经常写点东西</li>
<li>继续完善这个Blog</li>
<li>属于自己的上线APP</li>
<li>加大github contributions的绿化程度</li>
</ul>
<h1 id="Motto"><a href="#Motto" class="headerlink" title="Motto"></a>Motto</h1><p>程序人生的精彩需要坚持不懈地积累！</p>
]]></content>
      
        <categories>
            
            <category> 日志 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
